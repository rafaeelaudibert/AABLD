<% content_for :title do %>
    Edição | Transação
<% end %>

<% @transaction.user_tickets.each do |user_ticket| %>
    <div class="form-row">
        <div class="form-group col-md-5 col-sm-6">
            <label> <%= t('activerecord.models.user_ticket.ticket') %> </label> <br/> 
            <%= best_in_place user_ticket, :ticket_id, as: :select, collection: Ticket.full_view_select_for_bip, inner_class: 'form-control select2' %>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <label> <%= t('activerecord.models.user_ticket.quantity') %> </label> <br/> 
            <%= best_in_place user_ticket, :quantity, inner_class: 'form-control' %>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <label> <%= t('activerecord.models.user_ticket.original_value') %> </label> <br/> 
            <%= best_in_place user_ticket, :original_value, inner_class: 'form-control cleave-value', display_with: lambda { |x| format_currency(x) } %>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <label> <%= t('activerecord.models.user_ticket.total') %> </label> <br/>
            <span><%= format_currency user_ticket.total %></span>
        </div>

        <div class="form-group col-md-1 col-sm-12 text-right">
            <label class='d-none d-md-block'> Actions </label>
            <%= button_tag class: 'btn btn-danger btn-delete', 'data-user-ticket-id': user_ticket.id do %>
                <i class="fas fa-times"></i>
            <% end %>
        </div>
        <hr style="width: 100%; margin-top: 0"/>
    </div>
<% end %>

<%= form_with(model: UserTicket.new, local: true, html: {'onSubmit': 'submitUserTicket(event, this);'}) do |form| %>
    <div class="form-row">
        <div class="form-group col-md-5 col-sm-6">
            <%= form.label :ticket_id %> <br/>
            <%= form.select :ticket_id, Ticket.full_view_select, {include_blank: "Selecione a passagem", required: true}, {class: 'form-control select2'} %>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <%= form.label :quantity %> <br/>
            <div class="input-group">
                <div class="input-group-prepend">
                    <button class="btn btn-outline-danger decrement-quantity" data_index="1" type="button"><i class="fas fa-minus"></i></button>
                </div>

                <%= form.text_field :quantity, class: 'form-control text-center index_1 ticket-quantity' %>
                
                <div class="input-group-append">
                    <button class="btn btn-outline-success increment-quantity" data_index="1" type="button"><i class="fas fa-plus"></i></button>
                </div>
            </div>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <%= form.label :original_value %> <br/>
            <%= form.text_field :original_value, class: 'form-control cleave-value', value: '0.00' %>
        </div>

        <div class="form-group col-md-2 col-sm-6">
            <%= form.label :total %> <br/>
            <%= form.text_field :total, class: 'form-control cleave-total', value: '0.00' %>
        </div>

        <div class="form-group col-md-1 col-sm-12 text-right">
            <%= form.label :actions, class: 'd-none d-md-block' %>
            <%= button_tag class: 'btn btn-success' do %>
                <i class="fas fa-check"></i>
            <% end %>
        </div>

        <%= form.hidden_field :user_id, readonly: true, value: @user.id %>
        <%= form.hidden_field :transaction_id, readonly: true, value: @transaction.id %>
    </div>
<% end %>

<% if can? :index, @transaction %>
    <%= link_to 'Voltar', user_transactions_path(@user), class: 'btn btn-lg btn-danger' %>
<% end %>

<% if can? :finish, @transaction %>
    <%= link_to 'Finalizar Transação', finish_transactions_path(@transaction), class: 'btn btn-lg btn-primary float-right' %>
<% end %>

<% content_for :javascript do %>
    <script>

        // Cleave.js
        $('.cleave-value').each( (_, domObj) => new Cleave(domObj, {numeral: true}));
        $('.cleave-total').each( (_, domObj) => new Cleave(domObj, {numeral: true}));

        function handleBIPActivate(e) {
            const input_field = e.target.children[0].children[0];

            new Cleave(input_field, {numeral: true});       // Create Cleave
            $(input_field).on('input', updateTotalValue);   // Add the possibility to update value
        }

        function notifyBIPError(_e, {responseText}){
            const responseJSON = JSON.parse(responseText);

            for (entity in responseJSON){
                responseJSON[entity].forEach(error => {
                    iziToast.error({
                        title: status,
                        message: error,
                        position: 'bottomRight'
                    });
                })   
            }
        }
        
        // Add BIP Handlers
        $('.best_in_place').on('best_in_place:activate', handleBIPActivate);
        $('.best_in_place').on('best_in_place:error', notifyBIPError);

        // Function which receives a DOM element which stores quantity of tickets
        // and updates the values inputs 
        function updateValues(quantityInput) {            
            const valueInput = quantityInput.parentNode.parentNode.parentNode.children[2].children[2];
            const totalInput = quantityInput.parentNode.parentNode.parentNode.children[3].children[2];

            const price = parseFloat(valueInput.value) || 0;
            const totalPrice = parseFloat(price) * (parseInt(quantityInput.value) || 0);
            
            totalInput.value = totalPrice.toFixed(2);
        }

        function updateValuesBySelect(e) {
            const select = e.target;
            const quantityInput = select.parentNode.parentNode.children[1].children[2].children[1];
            
            const valueInput = quantityInput.parentNode.parentNode.parentNode.children[2].children[2];
            const price = parseFloat(select.selectedOptions[0].getAttribute('price')) || 0;
            valueInput.value = price.toFixed(2);
            
            updateValues(quantityInput);
        }

        function decrementCounter(e) {
            const dataIndex = parseInt(e.target.getAttribute('data_index') || e.target.parentNode.getAttribute('data_index'));
            const quantityInput = document.getElementsByClassName(`index_${dataIndex}`)[0];
            quantityInput.value = Math.max(parseInt(quantityInput.value) - 1, 1);

            updateValues(quantityInput);
        }

        function incrementCounter(e) {
            const dataIndex = parseInt(e.target.getAttribute('data_index') || e.target.parentNode.getAttribute('data_index'));
            const quantityInput = document.getElementsByClassName(`index_${dataIndex}`)[0];
            quantityInput.value = parseInt(quantityInput.value) + 1;

            updateValues(quantityInput);
        }

        function updateTotalValue(e) {
            try {
                const quantityInput = e.target.parentNode.parentNode.children[1].children[2].children[1];
                const totalInput = e.target.parentNode.parentNode.children[3].children[2];
                totalInput.value = "R$ " + ((parseFloat(e.target.value) || 0) * (parseInt(quantityInput.value) || 0)).toFixed(2);
            } catch(err) { // We are editing a ticket, not creating one
                
                const totalInput = e.target.parentNode.parentNode.parentNode.parentNode.children[3].children[2];
                
                if (e.target.name === 'quantity' ) {   // We are editing the quantity field
                    const valueInput = e.target.parentNode.parentNode.parentNode.parentNode.children[2].children[2];
                    totalInput.innerText = "R$ " + ((parseFloat(valueInput.innerText.slice(3).replace(',', '.')) || 0) * (parseInt(e.target.value) || 0)).toFixed(2);
                } else if (e.target.name === 'original_value') { // Nope, we are editing the value field
                    const quantityInput = e.target.parentNode.parentNode.parentNode.parentNode.children[1].children[2];
                    totalInput.innerText = "R$ " + ((parseFloat(e.target.value) || 0) * (parseInt(quantityInput.innerText) || 0)).toFixed(2);
                }


                
            }            
        }

        // When clicking to delete a userTicket, remove it
        function deleteUserTicket(e) {
            const target = $(e.target).closest('button'); // If we clicked in the icon, redirect to the closest parent button
            const removeTarget = target.parent().parent();
            
            $.ajax({
                type: 'DELETE',
                url: '<%= user_tickets_path %>/' + target.attr('data-user-ticket-id'),
                data: { authenticity_token: $('[name="csrf-token"]')[0].content },
            })
            .then(() => {
                removeTarget.hide(150, () => removeTarget.remove())
                iziToast.success({
                    title: 'Sucesso',
                    message: 'Passagem removida com sucesso',
                    position: 'bottomRight'
                });
            })
            .catch(({responseJSON, status}) => {
                for (entity in responseJSON){
                    responseJSON[entity].forEach(error => {
                        iziToast.error({
                            title: status,
                            message: error,
                            position: 'bottomRight'
                        });
                    })   
                }                
            });
        }

        function submitUserTicket(e, form)
        {
            e.preventDefault();
            console.log($(form).serialize() + '&user_id=<%= @user.id %>')

            $.ajax({
                type: 'POST',
                url: '<%= user_tickets_path %>',
                data: $(form).serialize() + '&user_id=<%= @user.id %>',
            })
            .then(data => {
                console.log(data);
                $(form)[0].reset();

                // OuterDiv
                const outerDiv = document.createElement('div');
                outerDiv.classList.add('form-row');

                // TicketDiv
                const ticketDiv = document.createElement('div');
                ticketDiv.classList.add('form-group', 'col-md-5', 'col-sm-6');

                const ticketDivLabel = document.createElement('label');
                ticketDivLabel.innerHTML = '<%= t('activerecord.models.user_ticket.ticket') %>';

                const ticketDivBr = document.createElement('br');

                const ticketDivBipSpan = document.createElement('span');
                ticketDivBipSpan.innerText = data.ticket.full_itinerary;
                ticketDivBipSpan.setAttribute('data-bip-type', 'select');
                ticketDivBipSpan.setAttribute('data-bip-attribute', 'ticket_id');
                ticketDivBipSpan.setAttribute('data-bip-collection', '<%= Ticket.full_view_select_for_bip.to_a.to_s.html_safe %>');
                ticketDivBipSpan.setAttribute('data-bip-inner-class', 'form-control select2');
                ticketDivBipSpan.setAttribute('data-bip-object', 'user_ticket');
                ticketDivBipSpan.setAttribute('data-bip-original-content', data.id);
                ticketDivBipSpan.setAttribute('data-bip-url', `<%= user_tickets_path %>/${data.id}`);
                ticketDivBipSpan.setAttribute('data-bip-value', data.id);
                ticketDivBipSpan.classList.add('best_in_place');
                $(ticketDivBipSpan).best_in_place();
                $(ticketDivBipSpan).on('best_in_place:error', notifyBIPError);

                ticketDiv.appendChild(ticketDivLabel);
                ticketDiv.appendChild(ticketDivBr);
                ticketDiv.appendChild(ticketDivBipSpan);

                outerDiv.appendChild(ticketDiv);

                // Quantity Div
                const quantityDiv = document.createElement('div');
                quantityDiv.classList.add('form-group', 'col-md-2', 'col-sm-6');

                const quantityDivLabel = document.createElement('label');
                quantityDivLabel.innerHTML = '<%= t('activerecord.models.user_ticket.quantity') %>';

                const quantityDivBr = document.createElement('br');

                const quantityDivBipSpan = document.createElement('span');
                quantityDivBipSpan.innerText = data.quantity;
                quantityDivBipSpan.setAttribute('data-bip-type', 'input');
                quantityDivBipSpan.setAttribute('data-bip-attribute', 'quantity');
                quantityDivBipSpan.setAttribute('data-bip-inner-class', 'form-control');
                quantityDivBipSpan.setAttribute('data-bip-object', 'user_ticket');
                quantityDivBipSpan.setAttribute('data-bip-original-content', data.quantity);
                quantityDivBipSpan.setAttribute('data-bip-url', `<%= user_tickets_path %>/${data.id}`);
                quantityDivBipSpan.setAttribute('data-bip-value', data.quantity);
                quantityDivBipSpan.classList.add('best_in_place');
                $(quantityDivBipSpan).best_in_place();
                $(quantityDivBipSpan).on('best_in_place:activate', handleBIPActivate);
                $(quantityDivBipSpan).on('best_in_place:error', notifyBIPError);

                quantityDiv.appendChild(quantityDivLabel);
                quantityDiv.appendChild(quantityDivBr);
                quantityDiv.appendChild(quantityDivBipSpan);

                outerDiv.appendChild(quantityDiv);

                // Original Value Div
                const originalValueDiv = document.createElement('div');
                originalValueDiv.classList.add('form-group', 'col-md-2', 'col-sm-6');

                const originalValueDivLabel = document.createElement('label');
                originalValueDivLabel.innerHTML = '<%= t('activerecord.models.user_ticket.original_value') %>';

                const originalValueDivBr = document.createElement('br');

                const originalValueDivBipSpan = document.createElement('span');
                originalValueDivBipSpan.innerText = "R$ " + parseFloat(data.original_value).toFixed(2);
                originalValueDivBipSpan.setAttribute('data-bip-type', 'input');
                originalValueDivBipSpan.setAttribute('data-bip-attribute', 'original_value');
                originalValueDivBipSpan.setAttribute('data-bip-inner-class', 'form-control cleave-value');
                originalValueDivBipSpan.setAttribute('data-bip-object', 'user_ticket');
                originalValueDivBipSpan.setAttribute('data-bip-original-content', data.original_value);
                originalValueDivBipSpan.setAttribute('data-bip-url', `<%= user_tickets_path %>/${data.id}`);
                originalValueDivBipSpan.setAttribute('data-bip-value', data.quantity);
                originalValueDivBipSpan.classList.add('best_in_place');
                $(originalValueDivBipSpan).best_in_place();
                $(originalValueDivBipSpan).on('best_in_place:activate', handleBIPActivate);
                $(originalValueDivBipSpan).on('best_in_place:error', notifyBIPError);

                originalValueDiv.appendChild(originalValueDivLabel);
                originalValueDiv.appendChild(originalValueDivBr);
                originalValueDiv.appendChild(originalValueDivBipSpan);

                outerDiv.appendChild(originalValueDiv);

                // Total Div
                const totalValueDiv = document.createElement('div');
                totalValueDiv.classList.add('form-group', 'col-md-2', 'col-sm-6');

                const totalValueDivLabel = document.createElement('label');
                totalValueDivLabel.innerHTML = '<%= t('activerecord.models.user_ticket.total') %>';

                const totalValueDivBr = document.createElement('br');

                const totalValueDivBipSpan = document.createElement('span');
                totalValueDivBipSpan.innerText = "R$ " + (parseInt(data.quantity) * parseFloat(data.original_value)).toFixed(2);

                totalValueDiv.appendChild(totalValueDivLabel);
                totalValueDiv.appendChild(totalValueDivBr);
                totalValueDiv.appendChild(totalValueDivBipSpan);

                outerDiv.appendChild(totalValueDiv);

                // Action div + button
                const actionDiv = document.createElement('div');
                actionDiv.classList.add('form-group', 'col-md-1', 'col-sm-12', 'text-right');

                const actionDivLabel = document.createElement('label');
                actionDivLabel.innerHTML = '<%= t('activerecord.models.user_ticket.actions') %>';
                actionDivLabel.classList.add('d-none', 'd-md-block');

                const actionDivButton = document.createElement('button');
                actionDivButton.classList.add('btn', 'btn-danger', 'btn-delete');
                actionDivButton.type = "submit";
                actionDivButton.setAttribute('data-user-ticket-id', data.id);
                actionDivButton.addEventListener('click', deleteUserTicket);

                const actionDivButtonIcon = document.createElement('i');
                actionDivButtonIcon.classList.add('fas', 'fa-times');

                actionDiv.appendChild(actionDivLabel);
                actionDiv.appendChild(actionDivButton);
                actionDivButton.appendChild(actionDivButtonIcon);

                outerDiv.appendChild(actionDiv);

                // hr Tag
                const hrTag = document.createElement('hr');
                hrTag.style.width = '100%';
                hrTag.style['margin-top'] = '0';

                outerDiv.appendChild(hrTag);

                // Hide outer div, to display it later
                $(outerDiv).hide();

                // Append to the form the outer div, and the hrTag
                form.insertAdjacentElement('beforebegin', outerDiv);
                $(outerDiv).show(150); // Display it with animation

                iziToast.success({
                    title: 'Sucesso',
                    message: 'Passagem adicionada com sucesso',
                    position: 'bottomRight'
                }); 

            })
            .catch(({responseJSON, status}) => {
                for (entity in responseJSON){
                    responseJSON[entity].forEach(error => {
                        iziToast.error({
                            title: status,
                            message: error,
                            position: 'bottomRight'
                        });
                    })   
                }                             
            });

            return false;
        }

        $('.decrement-quantity').each( (_, domObj) => $(domObj).on('click', decrementCounter));
        $('.increment-quantity').each( (_, domObj) => $(domObj).on('click', incrementCounter));
        $('.ticket-quantity').each( (_, domObj) => $(domObj).on('input', () => updateValues(domObj)))
        $('.select2').each( (_, domObj) => $(domObj).on('select2:select', updateValuesBySelect));
        $('.cleave-value').each( (_, domObj) => $(domObj).on('input', updateTotalValue));
        $('.btn-delete').each( (_, domObj) => $(domObj).on('click', deleteUserTicket));
    </script>
<% end %>

<% content_for :extra_javascript do %>
  <script src="/assets/js/cleave.min.js"></script>
  <script src="/assets/js/select2.full.min.js"></script>
<% end %>

<% content_for :css do %>
  <link rel="stylesheet" href="/assets/css/select2.min.css">
<% end %>